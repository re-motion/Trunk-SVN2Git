  // User together with a role for Dictionary based AclExpander implementation
  public class UserWithRole : IEquatable<AclExpansionEntry>
  {
    public User User { get; private set; }
    public Role Role { get; private set; }
    public UserWithRole (User user, Role role)
    {
      User = user;
      Role = role;
    }

    public bool Equals (AclExpansionEntry other)
    {
      return (User == other.User) && (Role == other.Role);
    }
  }



    void PropertyTest(ObjectID tenantId) {
      User[] users = User.FindByTenantID (tenantId).ToArray ();
      IsUserPropertyNull (users, Properties<User>.Get (x => x.UserName));
      IsUserPropertyNull (users, Properties<User>.Get (x => x.OwningGroup));
      IsUserPropertyNull (users, Properties<User>.Get (x => x.Tenant));

      var userNameProperty = new Property<User, string> (x => x.UserName);
      var userName = userNameProperty.Get (users[0]);
    }
     
    bool IsUserPropertyNull<T>(User[] users, Property<User,T> userProperty) where T : class
    {
      foreach (var user in users)
      {
        var propertyValue = userProperty.Get (user);
        if (propertyValue == null)
        {
          return true;
        }
      }
      return false;
    }
    
    
var userWithRole = new UserWithRole (user, role);
AclExpansionEntry aclExpansionEntry;
aclExpansionEntries.TryGetValue (userWithRole, out aclExpansionEntry);
if(aclExpansionEntry == null)
{
  aclExpansionEntries[userWithRole] = new AclExpansionEntry (user, role, aclProbe.AccessConditions, accessTypeDefinitions);
}
    
    
    
/// <summary>
/// Used by <see cref="AclExpander"/> to make sure that a matching ACE is the one we are probing for.
/// </summary>
/// <param name="token"></param>
/// <returns></returns>
private bool MatchesAce (SecurityToken token)
{
  return this == (token.SpecificAce ?? this);
}
    
    
    
    
    
private void WriteTableBodySpike (HtmlWriter html, List<AclExpansionEntry> aclExpansion)
{
  var aclExpansionHierarchy =
      from expansion in aclExpansion
      group expansion by expansion.User
        into userGroup
        select new
        {
          User = userGroup.Key,
          RoleGroup =
            from user in userGroup
            group user by user.Role
              into roleGroup
              select new
              {
                Role = roleGroup.Key,
                ClassGroup =
                from role in roleGroup
                group role by role.Class
                  into classGroup
                  select new
                  {
                    Class = classGroup.Key,
                    StatesGroup = classGroup
                  }
              }
        };

  foreach (var userGroup in aclExpansionHierarchy)
  {
    bool newUserRow = true;
    var userName = userGroup.User.DisplayName;
    int userRowCount = userGroup.RoleGroup.SelectMany(x => x.ClassGroup).SelectMany(x => x.StatesGroup).Count();
    foreach (var roleGroup in userGroup.RoleGroup)
    {
      bool newRoleRow = true;
      var role = roleGroup.Role;
      //int roleRowCount = roleGroup.ClassGroup.Count ();
      int roleRowCount = roleGroup.ClassGroup.SelectMany (x => x.StatesGroup).Count ();
      foreach (var classGroup in roleGroup.ClassGroup)
      {
        bool newClassRow = true;
        var className = classGroup.Class.DisplayName;
        int classRowCount = classGroup.StatesGroup.Count ();
        
        foreach (var entry in classGroup.StatesGroup)
        {
          var stateArray = entry.StateCombinations.SelectMany (x => x.GetStates ()).ToArray ();

          _htmlWriter.tr();

          if (newUserRow)
          {
            newUserRow = false;
            WriteTableDataWithRowCount (userName, userRowCount);
          }

          if (newRoleRow)
          {
            newRoleRow = false;
            WriteTableDataForRole (role, roleRowCount);
          }

          if (newClassRow)
          {
            newClassRow = false;
            WriteTableDataWithRowCount (className, classRowCount);
          }

          //WriteTableDataWithAddendum (userName, userRowCount);
          //WriteTableDataForRole (role, roleRowCount);
          //WriteTableDataWithRowCount (className, classRowCount);

          tdBodyStates (entry);
          tdBodyConditions (entry.AccessConditions);
          tdBodyAccessTypes (entry.AccessTypeDefinitions);
          _htmlWriter.trEnd();

        }
      }
    }
  }
}    



private void WriteTableBody (List<AclExpansionEntry> aclExpansion)
{
  var aclExpansionUserGrouping = GetAclExpansionGrouping (aclExpansion, (aee => aee.User));

  foreach (var userGroup in aclExpansionUserGrouping)
  {
    var userName = userGroup.Key.DisplayName;
    WriteTableRowBeginIfNotInTableRow ();
    WriteTableDataWithRowCount (userName, userGroup.Items.Count ());

    var aclExpansionRoleGrouping = GetAclExpansionGrouping (userGroup, (x => x.Role));

    foreach (var roleGroup in aclExpansionRoleGrouping)
    {
      var role = roleGroup.Key;
      WriteTableRowBeginIfNotInTableRow ();
      WriteTableDataForRole (role, roleGroup.Items.Count ());

      var aclExpansionClassGrouping = GetAclExpansionGrouping (roleGroup, (x => x.Class));

      foreach (var classGroup in aclExpansionClassGrouping)
      {
        var className = classGroup.Key.DisplayName;
        WriteTableRowBeginIfNotInTableRow ();
        WriteTableDataWithRowCount (className, classGroup.Items.Count ());

        foreach (var aclExpansionEntry in classGroup.Items)
        {
          WriteTableRowBeginIfNotInTableRow ();

          tdBodyStates (aclExpansionEntry);
          tdBodyConditions (aclExpansionEntry.AccessConditions);
          tdBodyAccessTypes (aclExpansionEntry.AccessTypeDefinitions);

          WriteTableRowEnd ();

        }
      }
    }
  }
}