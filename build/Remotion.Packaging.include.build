<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="CreatePackageProperties">
    <Error Text="The target 'CreatePackageProperties' is not implemented." />
  </Target>

  <Target Name="CreateSourceFiles" DependsOnTargets="CreateStandardExcludes">
    <Error Text="The target 'CreateSourceFiles' is not implemented." />
  </Target>

  <Target Name="CreateBinaryFiles" DependsOnTargets="CreateStandardExcludes">
    <Error Text="The target 'CreateBinaryFiles' is not implemented." />
  </Target>

  <Target Name="CreateLicenseFiles" DependsOnTargets="CreateStandardExcludes">
    <Error Text="The target 'CreateLicenseFiles' is not implemented." />
  </Target>

  <Import Project="Remotion.Tasks.include.build" />

  <PropertyGroup>
    <MSBuildCommunityTasksPath>$(SolutionDirectory)\prereq\Tools\MSBuildCommunityTasks\</MSBuildCommunityTasksPath>
    <MSBuildExtensionPackPath>$(SolutionDirectory)\prereq\Tools\MSBuildExtensionPack\</MSBuildExtensionPackPath>
    <JiraReleaseNoteGeneratorPath>$(SolutionDirectory)\prereq\Tools\JiraReleaseNoteGenerator\</JiraReleaseNoteGeneratorPath>
    <CodeplexReleaseToolPath>$(SolutionDirectory)\prereq\Tools\CodeplexReleaseTool\</CodeplexReleaseToolPath>
    <CodeplexTasksPath>$(SolutionDirectory)prereq\Tools\Codeplex.MSBuildTasks\</CodeplexTasksPath>
  </PropertyGroup>

  <Target Name="CreatePackages" DependsOnTargets="CreateSourcePackage;CreateBinaryPackage;"/>

  <Target Name="DeployPackages" DependsOnTargets="CreateReleaseNotes;AddReleaseNotesToBinaryPackage;UploadToShares;UploadToCodePlex" />
    
  <!-- Source Package -->
  
  <Target Name="CreateSourcePackage" DependsOnTargets="CreateSourceZipFileProperty;CreateSourceFiles;CreateOutputDirectory;">
    <Message Text="Creating source package, PackageName=$(PackageName)" Importance="High"/>

    <Error Text="The property 'SolutionDirectory' is not set." Condition="'$(SolutionDirectory)' == ''" />

    <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" 
                                             ZipFileName="$(SourceZipFile)" 
                                             RemoveRoot="$(SolutionDirectory)" 
                                             CompressFiles="@(SourceFiles)" />

    <Message Text="Done creating source package, PackageName=$(PackageName)" Importance="High"/>
  </Target>

  <Target Name="CreateSourceZipFileProperty" DependsOnTargets="CreatePackageProperties">
    <Error Text="The property 'OutputDirectory' is not set." Condition="'$(OutputDirectory)' == ''" />
    <Error Text="The property 'Version' is not set." Condition="'$(Version)' == ''" />

    <PropertyGroup>
      <SourceZipFile>$(OutputDirectory)$(PackageName)_SourceCode_$(Version).zip</SourceZipFile>
    </PropertyGroup>
  </Target>

  <!-- Binary Package -->

  <Target Name="CreateBinaryPackage" DependsOnTargets="CreateBinaryZipFileProperty;CreateBinaryFiles;CreateLicenseFiles;CreateOutputDirectory;">
    <Message Text="Creating binary package, PackageName=$(PackageName)" Importance="High"/>

    <Error Text="The property 'OutputDirectory' is not set." Condition="'$(OutputDirectory)' == ''" />

    <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create"
                                             ZipFileName="$(BinaryZipFile)"
                                             RemoveRoot="$(BinariesDirectory)"
                                             CompressFiles="@(BinaryFiles)" />

    <PropertyGroup>
      <_tempLicenseFilesDirectory>$(TempDirectory)$([System.Guid]::NewGuid())\</_tempLicenseFilesDirectory>
    </PropertyGroup>

    <Copy DestinationFolder="$(_tempLicenseFilesDirectory)license" SourceFiles="@(LicenseFiles)" />

    <ItemGroup>
      <_tempLicenseFiles Remove="@(_tempReleaseNoteFiles)"/>
      <_tempLicenseFiles Include="$(_tempLicenseFilesDirectory)\**" />
    </ItemGroup>


    <MSBuild.ExtensionPack.Compression.DNZip TaskAction="AddFiles"
                                             ZipFileName="$(BinaryZipFile)"
                                             RemoveRoot="$(_tempLicenseFilesDirectory)"
                                             CompressFiles="@(_tempLicenseFiles)" />

    <Message Text="Done creating binary package, PackageName=$(PackageName)" Importance="High"/>
  </Target>

  <Target Name="CreateBinaryZipFileProperty" DependsOnTargets="CreatePackageProperties">
    <Error Text="The property 'OutputDirectory' is not set." Condition="'$(OutputDirectory)' == ''" />
    <Error Text="The property 'Version' is not set." Condition="'$(Version)' == ''" />

    <PropertyGroup>
      <BinaryZipFile>$(OutputDirectory)$(PackageName)_$(Version).zip</BinaryZipFile>
    </PropertyGroup>
  </Target>

  <!-- Release Notes -->

  <Target Name="CreateReleaseNotes" DependsOnTargets="CreateReleaseNotesDirectoryProperty">
    <Message Text="Creating release notes, PackageName=$(PackageName)" Importance="High"/>

    <PropertyGroup>
      <_jiraComponent Condition="$(ReleaseNotesComponentName) == ''"></_jiraComponent>
      <_jiraComponent Condition="$(ReleaseNotesComponentName) != ''">component='$(ReleaseNotesComponentName)'</_jiraComponent>
    </PropertyGroup>

    <Exec Command="JiraReleaseNoteGenerator.exe $(Version) $(ReleaseNotesDirectory) $(_jiraComponent)"
          WorkingDirectory="$(JiraReleaseNoteGeneratorPath)" />

    <Message Text="Done creating release notes, PackageName=$(PackageName)" Importance="High"/>
  </Target>
  
  <Target Name="AddReleaseNotesToBinaryPackage" DependsOnTargets="CreateBinaryZipFileProperty;CreateReleaseNotesDirectoryProperty">
    <Error Text="Binary zip-file $(BinaryZipFile) is missing." Condition="!Exists('$(BinaryZipFile)')"  />

    <PropertyGroup>
      <_regexVersionPatten>(\d+\.\d+\.\d+)</_regexVersionPatten>
    </PropertyGroup>

    <ItemGroup>
      <_releaseNoteFiles Remove="@(_releaseNoteFiles)"/>
      <_releaseNoteFiles Include="$(ReleaseNotesDirectory)*.*"/>

      <_emptyReleaseNoteFiles Remove="@(_emptyReleaseNoteFiles)"/>
      <_emptyReleaseNoteFiles Include="@(_releaseNoteFiles)" 
                              Condition="$([System.IO.File]::ReadAllText (%(Identity)).Length) == 0"/>

      <_futureReleaseNoteFiles Remove="@(_futureReleaseNoteFiles)"/>
      <_futureReleaseNoteFiles Include="@(_releaseNoteFiles)" 
                               Condition="$([System.Version]::Parse ($(Version)).CompareTo ( $([System.Version]::Parse ( $([System.Text.RegularExpressions.Regex]::Match (%(FileName), $(_regexVersionPatten)).Value) )) ) ) &lt; 0"/>

      <_releaseNoteFiles Remove="@(_emptyReleaseNoteFiles)" />
      <_releaseNoteFiles Remove="@(_futureReleaseNoteFiles)" />
    </ItemGroup>

    <PropertyGroup>
      <_tempReleaseNotesDirectory>$(TempDirectory)$([System.Guid]::NewGuid())\</_tempReleaseNotesDirectory>
    </PropertyGroup>
    
    <Copy DestinationFolder="$(_tempReleaseNotesDirectory)release-notes" SourceFiles="@(_releaseNoteFiles)" />

    <ItemGroup>
      <_tempReleaseNoteFiles Remove="@(_tempReleaseNoteFiles)"/>
      <_tempReleaseNoteFiles Include="$(_tempReleaseNotesDirectory)**" />
    </ItemGroup>
    
    <MSBuild.ExtensionPack.Compression.DNZip TaskAction="AddFiles"
                                             ZipFileName="$(BinaryZipFile)"
                                             RemoveRoot="$(_tempReleaseNotesDirectory)"
                                             CompressFiles="@(_tempReleaseNoteFiles)" 
                                             Condition="@(_tempReleaseNoteFiles) != ''"/>

    <PropertyGroup>
      <_releaseNotesFile>$(ReleaseNotesDirectory)ReleaseNotes_v$(Version).html</_releaseNotesFile>
      <_hasResolvedIssues Condition="Exists ($(_releaseNotesFile)) AND $([System.IO.File]::ReadAllText ($(_releaseNotesFile)).Length) > 0">True</_hasResolvedIssues>
      <UploadToCodePlex Condition="$(UploadToCodePlex) == 'True' AND $(_hasResolvedIssues) != 'True'">False</UploadToCodePlex>
    </PropertyGroup>
  </Target>

  <Target Name="CreateReleaseNotesDirectoryProperty" DependsOnTargets="CreatePackageProperties">
    <Error Text="The property 'ArchiveDirectory' is not set." Condition="'$(ArchiveDirectory)' == ''" />

    <PropertyGroup>
      <_releaseNotesVersionDirectory>$([System.Version]::Parse ($(Version)).ToString (2))</_releaseNotesVersionDirectory>
      <ReleaseNotesDirectory>$(ArchiveDirectory)$(PackageName)\release-notes\$(_releaseNotesVersionDirectory)\</ReleaseNotesDirectory>
    </PropertyGroup>
  </Target>

  <!-- Publishing -->

  <Target Name="UploadToShares" DependsOnTargets="CreateSourceZipFileProperty;CreateBinaryZipFileProperty">
    <Message Text="Uploading to shares, PackageName=$(PackageName)" Importance="High"/>

    <Error Text="The property 'ArchiveDirectory' is not set." Condition="'$(ArchiveDirectory)' == ''" />
    <Error Text="The property 'WebShareDirectory' is not set." Condition="'$(WebShareDirectory)' == ''" />

    <ItemGroup>
      <_temp Remove="@(_temp)"/>
      <_temp Include="$(SourceZipFile);$(BinaryZipFile)">
        <DestinationFolder>$(ArchiveDirectory)$(PackageName)\builds\</DestinationFolder>
      </_temp>
      <_temp Include="$(SourceZipFile);$(BinaryZipFile)" Condition="($(UploadToWebShare) == 'True')">
        <DestinationFolder>$(WebShareDirectory)</DestinationFolder>
      </_temp>
    </ItemGroup>

    <ItemGroup>
      <_publishedFiles Remove="@(_publishedFiles)"/>
      <_publishedFiles Include="@(_temp)">
        <DestinationFolder>%(DestinationFolder)</DestinationFolder>
        <DestinationFile>%(DestinationFolder)%(FileName)%(Extension)</DestinationFile>
      </_publishedFiles>
    </ItemGroup>

    <Error Text="The file '%(_publishedFiles.FileName)%(_publishedFiles.Extension)' already exists in the destination folder '%(_publishedFiles.DestinationFolder)'."
           Condition="Exists (%(_publishedFiles.DestinationFile))"/>

    <Copy SourceFiles="%(_publishedFiles.Identity)" DestinationFiles="%(_publishedFiles.DestinationFile)"/>

    <Message Text="Done uploading to shares, PackageName=$(PackageName)" Importance="High"/>
  </Target>

  <Target Name="UploadToCodePlex" DependsOnTargets="CreatePackageProperties;UploadToCodePlexInternal" />
  
  <Target Name="UploadToCodePlexInternal"
          DependsOnTargets="CreateSourceZipFileProperty;CreateBinaryZipFileProperty"
          Condition="$(UploadToCodePlex) == 'True'">

    <Message Text="Uploading to CodePlex, PackageName=$(PackageName)" Importance="High"/>

    <Error Text="The property 'CodePlexProjectName' is not set." Condition="'$(CodePlexProjectName)' == ''" />

    <Exec Command="CodeplexReleaseTool.exe createRelease /projectName:$(CodePlexProjectName) /releaseName:$(Version) /description:&quot;This is build $(Version) of re-linq. Find the complete release notes for the build here: [url:Release Notes|https://www.re-motion.org/jira/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+RM+AND+component%3D%22$(ReleaseNotesComponentName)%22+AND+issuetype+in+%28Bug%2C+%22New+Feature%22%2C+%22Breaking+Change%22%2C+Performance%2C+Sub-Feature%29+AND+FixVersion%3D%22$(Version)%22++ORDER+BY+issuetype%2Ccomponent] &quot; /releaseDate:10.03.2010 /status:Stable /showToPublic:- /isDefaultRelease:- /username:$(CodeplexUsername) /password:$(CodeplexPassword)"
          WorkingDirectory="$(CodeplexReleaseToolPath)" />

    <Exec Command="CodeplexReleaseTool.exe uploadReleaseFiles /projectName:$(CodePlexProjectName) /releaseName:$(Version) /fileDisplayName:$([System.IO.Path]::GetFileName($(BinaryZipFile))) /fileDataPath:$(BinaryZipFile) /fileType:RuntimeBinary /username:$(CodeplexUsername) /password:$(CodeplexPassword)"
          WorkingDirectory="$(CodeplexReleaseToolPath)" />

    <Exec Command="CodeplexReleaseTool.exe uploadReleaseFiles /projectName:$(CodePlexProjectName) /releaseName:$(Version) /fileDisplayName:$([System.IO.Path]::GetFileName($(SourceZipFile))) /fileDataPath:$(SourceZipFile) /fileType:SourceCode /username:$(CodeplexUsername) /password:$(CodeplexPassword)"
          WorkingDirectory="$(CodeplexReleaseToolPath)" />

    <!--<ItemGroup>
      <_releaseFiles Remove="@(_releaseFiles)"/>
      <_releaseFiles Include="$(BinaryZipFile)">
        <Name>$([System.IO.Path]::GetFileName($(BinaryZipFile)))</Name>
        <FileType>RuntimeBinary</FileType>
      </_releaseFiles>
      <_releaseFiles Include="$(SourceZipFile)">
        <Name>$([System.IO.Path]::GetFileName($(SourceZipFile)))</Name>
        <FileType>SourceCode</FileType>
      </_releaseFiles>
    </ItemGroup>
    
    <CreateRelease
      ProjectName="$(CodePlexProjectName)"  
      ReleaseName="$(Version)"
      Description="This is build $(Version) of re-linq. Find the complete release notes for the build here: [url:Release Notes|https://www.re-motion.org/jira/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+RM+AND+component%3D%22$(ReleaseNotesComponentName)%22+AND+issuetype+in+%28Bug%2C+%22New+Feature%22%2C+%22Breaking+Change%22%2C+Performance%2C+Sub-Feature%29+AND+FixVersion%3D%22$(Version)%22++ORDER+BY+issuetype%2Ccomponent]"
      ReleaseDate="$([System.DateTime]::Now.ToString('dd.MM.yyyy'))"
      ReleaseStatus="Released"
      ShowToPublic="false"
      IsDefaultRelease="false"
      ShowOnHomepage="false"
      Username="$(CodeplexUsername)"
      Password="$(CodeplexPassword)" >
    </CreateRelease>

    <UploadFiles
      ProjectName="$(CodePlexProjectName)"
      ReleaseName="$(Version)"
      ReleaseFiles="@(_releaseFiles)"
      Username="$(CodeplexUsername)"
      Password="$(CodeplexPassword)" >
    </UploadFiles>-->

    <Message Text="Done uploading to CodePlex, PackageName=$(PackageName)" Importance="High"/>
  </Target>

  <!-- Shared Code -->
  
  <Target Name="CreateOutputDirectory">
    <Error Text="The property 'OutputDirectory' is not set." Condition="'$(OutputDirectory)' == ''" />

    <MakeDir Directories="$(OutputDirectory)" />
  </Target>

  <Target Name="CreateStandardExcludes">
    <Error Text="The property 'SolutionDirectory' is not set." Condition="'$(SolutionDirectory)' == ''" />

    <ItemGroup>
      <StandardExcludes Include="$(SolutionDirectory)**\.svn\**"/>
      <StandardExcludes Include="$(SolutionDirectory)**\_svn\**"/>

      <StandardExcludes Include="$(SolutionDirectory)**\*.log" />
      <StandardExcludes Include="$(SolutionDirectory)**\*.snk" />
      <StandardExcludes Include="$(SolutionDirectory)**\*.suo" />
      <StandardExcludes Include="$(SolutionDirectory)**\*.user" />
    </ItemGroup>
  </Target>

</Project>