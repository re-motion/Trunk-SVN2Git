/* Copyright (C) 2005 - 2008 rubicon informationstechnologie gmbh
 *
 * This program is free software: you can redistribute it and/or modify it under 
 * the terms of the re:motion license agreement in license.txt. If you did not 
 * receive it, please visit http://www.re-motion.org/licensing.
 * 
 * Unless otherwise provided, this software is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. 
 */

using System;
using System.Collections.Generic;
using Remotion.Collections;
using Remotion.Logging;
using Remotion.Mixins.CodeGeneration.DynamicProxy;
using Remotion.Mixins.Definitions;
using Remotion.Utilities;

namespace Remotion.Mixins.CodeGeneration
{
  /// <summary>
  /// Implements caching of the types generated by <see cref="IModuleManager"/> instances, triggered by <see cref="ConcreteTypeBuilder"/>.
  /// </summary>
  public class CodeGenerationCache
  {
    private static readonly ILog s_log = LogManager.GetLogger (typeof (CodeGenerationCache));
    
    private readonly object _lockObject = new object();
    private readonly ConcreteTypeBuilder _concreteTypeBuilder;
    private readonly Cache<ClassDefinitionBase, Type> _typeCache = new Cache<ClassDefinitionBase, Type> ();

    public CodeGenerationCache (ConcreteTypeBuilder concreteTypeBuilder)
    {
      ArgumentUtility.CheckNotNull ("concreteTypeBuilder", concreteTypeBuilder);
      _concreteTypeBuilder = concreteTypeBuilder;
    }

    public Type GetConcreteType (IModuleManager moduleManager, TargetClassDefinition targetClassDefinition, INameProvider nameProvider, INameProvider mixinNameProvider)
    {
      s_log.InfoFormat ("Generating type for {0}.", targetClassDefinition.ConfigurationContext);
      using (new CodeGenerationTimer ())
      {
        lock (_lockObject)
        {
          return _typeCache.GetOrCreateValue (
              targetClassDefinition,
              key => GenerateConcreteType (moduleManager, key, nameProvider, mixinNameProvider));
        }
      }
    }

    private Type GenerateConcreteType (IModuleManager moduleManager, ClassDefinitionBase targetClassDefinition, INameProvider nameProvider, INameProvider mixinNameProvider)
    {
      ITypeGenerator generator = moduleManager.CreateTypeGenerator (
          this,
          (TargetClassDefinition) targetClassDefinition,
          nameProvider,
          mixinNameProvider);

      foreach (Tuple<MixinDefinition, Type> finishedMixinTypes in generator.GetBuiltMixinTypes())
      {
        Tuple<MixinDefinition, Type> finishedMixinType = finishedMixinTypes;
        _typeCache.GetOrCreateValue (finishedMixinType.A, delegate { return finishedMixinType.B; });
      }

      Type finishedType = generator.GetBuiltType();
      return finishedType;
    }

    public ConcreteMixinType GetConcreteMixinType (ITypeGenerator mixedTypeGenerator, MixinDefinition mixinDefinition, INameProvider mixinNameProvider)
    {
      lock (_lockObject)
      {
        return _concreteTypeBuilder.Scope.CreateMixinTypeGenerator (mixedTypeGenerator, mixinDefinition, mixinNameProvider).GetBuiltType();
      }
    }

    public Type GetConcreteMixinTypeFromCacheOnly (MixinDefinition mixinDefinition)
    {
      ArgumentUtility.CheckNotNull ("mixinDefinition", mixinDefinition);
      lock (_lockObject)
      {
        Type type;
        _typeCache.TryGetValue (mixinDefinition, out type);
        if (type == null)
        {
          string message = string.Format (
              "No concrete mixin type is required for the given configuration (mixin {0} and target class {1}).",
              mixinDefinition.FullName,
              mixinDefinition.TargetClass.FullName);
          throw new ArgumentException (message, "mixinDefinition");
        }
        else
          return type;
      }
    }

    public void ImportTypes (IEnumerable<Type> types)
    {
      ArgumentUtility.CheckNotNull ("types", types);
      lock (_lockObject)
      {
        foreach (Type type in types)
        {
          foreach (ConcreteMixedTypeAttribute typeDescriptor in type.GetCustomAttributes (typeof (ConcreteMixedTypeAttribute), false))
          {
            TargetClassDefinition targetClassDefinition = typeDescriptor.GetTargetClassDefinition();
            _typeCache.GetOrCreateValue (targetClassDefinition, delegate { return type; });
          }

          foreach (ConcreteMixinTypeAttribute typeDescriptor in type.GetCustomAttributes (typeof (ConcreteMixinTypeAttribute), false))
          {
            MixinDefinition mixinDefinition = typeDescriptor.GetMixinDefinition();
            _typeCache.GetOrCreateValue (mixinDefinition, delegate { return type; });
          }
        }
      }
    }
  }
}