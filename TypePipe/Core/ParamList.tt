// Copyright (c) rubicon IT GmbH, www.rubicon.eu
//
// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.  rubicon licenses this file to you under 
// the Apache License, Version 2.0 (the "License"); you may not use this 
// file except in compliance with the License.  You may obtain a copy of the 
// License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the 
// License for the specific language governing permissions and limitations
// under the License.
// 
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
  int parameterCount = 20;
#>
using System;
using Remotion.TypePipe.Implementation;

namespace Remotion.TypePipe
{
  public abstract partial class ParamList
  {
<#
for (int i = 1; i <= parameterCount; i++)
{
  var parameters = Enumerable.Range (1, i);
  var typeArguments = string.Join (", ", parameters.Select (p => string.Format ("A{0}", p)));
  var arguments = string.Join (", ", parameters.Select (p => string.Format ("a{0}", p)));
  var signature = string.Join (", ", parameters.Select (p => string.Format ("A{0} a{0}", p)));
#>
    /// <summary>
    /// Creates a strongly typed list of parameters to be passed to a function or action.
    /// </summary>
    /// <returns>A <see cref="ParamList"/> encapsulating the passed parameters.</returns>
    public static ParamList Create<<#= typeArguments #>> (<#= signature #>)
    {
      return new ParamListImplementation<<#= typeArguments #>> (<#= arguments #>);
    }

<#
}
#>
  }
}
