// This file is part of the re-linq project (relinq.codeplex.com)
// Copyright (C) rubicon IT GmbH, www.rubicon.eu
// 
// re-linq is free software; you can redistribute it and/or modify it under 
// the terms of the GNU Lesser General Public License as published by the 
// Free Software Foundation; either version 2.1 of the License, 
// or (at your option) any later version.
// 
// re-linq is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with re-linq; if not, see http://www.gnu.org/licenses.
// 
using System;
using System.Linq.Expressions;
using Remotion.Linq.Parsing;
using Remotion.Linq.Utilities;

namespace Remotion.Linq.SqlBackend.SqlGeneration
{
  /// <summary>
  /// <see cref="SqlCustomTextExpression"/> can be used to insert custom SQL text into the SQL generated by <see cref="SqlGeneratingExpressionVisitor"/>. 
  /// The custom text is inserted into the statement as is, it is not escaped. Therefore, the provider making use of <see cref="SqlCustomTextExpression"/> 
  /// has to make sure the custom text cannot lead to SQL injection attacks.
  /// </summary>
  public class SqlCustomTextExpression : SqlCustomTextGeneratorExpressionBase
  {
    private readonly string _sqlText;
    
    public SqlCustomTextExpression (string sqlText, Type expressionType) : base(expressionType)
    {
      ArgumentUtility.CheckNotNull ("sqlText", sqlText);

      _sqlText = sqlText;
    }

    public override void Generate (ISqlCommandBuilder commandBuilder, ExpressionTreeVisitor textGeneratingExpressionVisitor, ISqlGenerationStage stage)
    {
      ArgumentUtility.CheckNotNull ("commandBuilder", commandBuilder);
      ArgumentUtility.CheckNotNull ("textGeneratingExpressionVisitor", textGeneratingExpressionVisitor);
      ArgumentUtility.CheckNotNull ("stage", stage);

      commandBuilder.Append (_sqlText);
    }

    protected override Expression VisitChildren (ExpressionTreeVisitor visitor)
    {
      return this;
    }

    public override string ToString ()
    {
      return _sqlText;
    }

  }
}