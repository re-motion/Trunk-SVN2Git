// This file is part of the re-motion Core Framework (www.re-motion.org)
// Copyright (c) rubicon IT GmbH, www.rubicon.eu
// 
// The re-motion Core Framework is free software; you can redistribute it 
// and/or modify it under the terms of the GNU Lesser General Public License 
// as published by the Free Software Foundation; either version 2.1 of the 
// License, or (at your option) any later version.
// 
// re-motion is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with re-motion; if not, see http://www.gnu.org/licenses.
// 
using System;
using System.Reflection;
using System.Runtime.Serialization;
using Remotion.Mixins.CodeGeneration.DynamicProxy;
using Remotion.ServiceLocation;
using Remotion.Utilities;

namespace Remotion.Mixins.CodeGeneration
{
  /// <summary>
  /// Provides a common interface for classes used to get concrete types for the mixin configuration.
  /// </summary>
  [ConcreteImplementation (typeof (ConcreteTypeBuilder))]
  public interface IConcreteTypeBuilder : IConcreteTypeProvider, IConcreteMixinTypeProvider
  {
    /// <summary>
    /// Saves the concrete types and mixin types generated by this <see cref="IConcreteTypeBuilder"/> to disk. 
    /// </summary>
    /// <returns>An array containing the paths of the assembly files saved.</returns>
    /// <remarks>
    /// <para>
    /// Each time this method is called, only the types generated since the last call operation are persisted.
    /// </para>
    /// <para>
    /// Having different assemblies with the same names loaded into one AppDomain can lead to sporadic
    /// <see cref="TypeLoadException">TypeLoadExceptions</see> in reflective scenarios. To avoid such errors, the  
    /// <see cref="ModuleManager.SignedAssemblyName"/> and <see cref="ModuleManager.UnsignedAssemblyName"/> properties by default include a counter
    /// that is increased every time the scope is reset; that way, the assembly names change every time.
    /// </para>
    /// </remarks>
    string[] SaveGeneratedConcreteTypes ();

    /// <summary>
    /// Imports the public concrete types and mixin types from the given <see cref="Assembly"/> into this <see cref="IConcreteTypeBuilder"/> instance.
    /// The assembly should have been generated via <see cref="SaveGeneratedConcreteTypes"/> or the TypeMixer utility.
    /// </summary>
    /// <param name="assembly">The assembly whose public types to load.</param>
    void LoadConcreteTypes (Assembly assembly);

    /// <summary>
    /// Initializes a mixin target instance which was created without its constructor having been called (e.g., 
    /// <see cref="FormatterServices.GetSafeUninitializedObject"/>). For deserialized objects use <see cref="InitializeDeserializedInstance"/>.
    /// </summary>
    /// <param name="mixinTarget">The mixin target to initialize.</param>
    /// <exception cref="ArgumentNullException">The mixin target is <see langword="null"/>.</exception>
    /// <remarks>
    /// This method must be called when a mixin target instance is created without calling its constructor. Before this method is executed, the 
    /// target instance cannot be used.
    /// </remarks>
    void InitializeUnconstructedInstance (IMixinTarget mixinTarget);

    /// <summary>
    /// Initializes a mixin target instance which was created by deserialization.
    /// </summary>
    /// <param name="mixinTarget">The mixin target to initialize.</param>
    /// <param name="mixinInstances">The deserialized mixin instances for the <paramref name="mixinTarget"/>.</param>
    /// <exception cref="ArgumentNullException">The mixin target is <see langword="null"/>.</exception>
    /// <remarks>
    /// This method must be called when a mixin target instance is deserialized. Before this method is executed, the target instance cannot be used.
    /// </remarks>
    void InitializeDeserializedInstance (IMixinTarget mixinTarget, object[] mixinInstances);

    /// <summary>
    /// Begins deserialization of a mixed object.
    /// </summary>
    /// <param name="typeTransformer">A transformation object that is given a chance to modify the deserialized type before it is instantiated.</param>
    /// <param name="info">The <see cref="SerializationInfo"/> object provided by the .NET serialization infrastructure.</param>
    /// <param name="context">The <see cref="StreamingContext"/> object provided by the .NET serialization infrastructure.</param>
    /// <returns>An <see cref="IObjectReference"/> object containing a partially deserialized mixed object. Be sure to call
    /// <see cref="FinishDeserialization"/> from an implementation of <see cref="IDeserializationCallback.OnDeserialization"/> to finish the
    /// deserialization process.</returns>
    /// <exception cref="ArgumentNullException">One or more of the parameters passed to this method are <see langword="null"/>.</exception>
    /// <exception cref="SerializationException">The serialization data does not hold the expected values.</exception>
    /// <remarks>
    /// <para>
    /// This method is useful when the mixin engine is combined with other code generation mechanisms. In such a case, the default
    /// <see cref="IObjectReference"/> implementation provided by the mixin code generation can be extended by a custom <see cref="IObjectReference"/>
    /// object by calling this method. This method instantiates the real object to be returned by the deserialization process, but the caller
    /// specifies a <paramref name="typeTransformer"/> delegate that gets the chance to modify the type of object before it is instantiated. The
    /// parameter passed to <paramref name="typeTransformer"/> is the type deducted from the deserialized mixin configuration.
    /// </para>
    /// <para>
    /// This method expects that the deserialized data is from a mixed object, calling it for an unmixed object will yield an exception.
    /// </para>
    /// </remarks>
    IObjectReference BeginDeserialization (Func<Type, Type> typeTransformer, SerializationInfo info, StreamingContext context);

    /// <summary>
    /// Finishes a deserialization process started by <see cref="BeginDeserialization"/>.
    /// </summary>
    /// <param name="objectReference">The object returned from <see cref="BeginDeserialization"/>.</param>
    /// <remarks>
    /// <exception cref="ArgumentNullException">The <paramref name="objectReference"/> parameter is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentTypeException">The <paramref name="objectReference"/> parameter does not hold an object returned by the
    /// <see cref="BeginDeserialization"/> method.</exception>
    /// <para>
    /// Call this method to complete deserialization of a mixed object when the .NET serialization infrastructure has finished its
    /// work, e.g. from an implementation of <see cref="IDeserializationCallback.OnDeserialization"/>. After this method, the real object
    /// contained in <paramref name="objectReference"/> can safely be used.
    /// </para>
    /// <para>
    /// If the given instance is not an instance of a mixed type, this method does nothing.
    /// </para>
    /// </remarks>
    void FinishDeserialization (IObjectReference objectReference);
  }
}
