1.11.18
=======
- Renamed IUserProvider to IPrincipalProvider
- Updated configuration to use "defaultPrincipalProvider" instead of "defaultUserProvider"
- Updated configuration to use "principalProviders" instead of "defaultPrincipalProvider"

1.11.3
======
- SecurityContext: Changed constructor to factory methods and provided overload for instaniating an instance by using EnumWrappers instead of Enums.

1.7.41
======
- Konfiguration:
  Bisher:
  <rubicon.security 
      permissionProvider="None|Reflection|Custom"
      userProvider="None|Thread|HttpContext|Custom"
      globalAccessTypeCacheProvider="None|RevisionBased|Custom"
      service="None|SecurityManager|Custom"
      >
    <customPermissionProvider type="..." />
    <customUserProvider type="..." />
    <customGlobalAccessTypeCacheProvider type="..." />
    <customService type="..." />
    <customFunctionSecurityStrategy type="..." />
  </rubicon.security>
  
  Neu: Der Konfiguration liegt das ASP.NET Provider Model zugrunde, d.h. es können beliebige Provider eingetragen werden, der standard-mäßig 
  verwendete wird explizit durch seinen Namen festgelegt.
  Zusätzlich sind bereits vordefinierte Provider hinterlegt:
  PermissionProvider:
                Rubicon.Security.Metadata.PermissionReflector = "Reflection" (= Standardprovider)
  UserProvider: 
                Rubicon.Security.ThreadUserProvider = "Thread" (= Standardprovider)
                Rubicon.Security.Web.HttpContextUserProvider = "HttpContext"
  GlobalAccessTypeCacheProvider: 
                Rubicon.Security.NullGlobalAccessTypeCacheProvider = "None" (= Standardprovider)
                Rubicon.Security.RevisionBasedAccessTypeCacheProvider = "RevisionBased"
  SecurityProvider (vormals SecurityService):
                Rubicon.Security.NullProviderService = "None" (= Standardprovider)
                Rubicon.SecurityManager.SecurityService = "SecurityManager"
  
  <rubicon.security 
      defaultPermissionProvider="Reflection|..."
      defaultUserProvider="Thread|HttpContext|...">
      defaultGlobalAccessTypeCacheProvider="None|RevisionBased|...">
      defaultSecurityProvider="None|SecurityManager|...">
    <permissionProviders>
      <add name="Custom1" type="..." />
      <add name="Custom2" type="..." />
      ...
    </permissionProviders>
    <userProviders>
      <add name="Custom1" type="..." />
      <add name="Custom2" type="..." />
      ...
    </userProviders>
    <globalAccessTypeCacheProviders>
      <add name="Custom1" type="..." />
      <add name="Custom2" type="..." />
      ...
    </globalAccessTypeCacheProviders>
    <securityProviders>
      <add name="Custom1" type="..." />
      <add name="Custom2" type="..." />
      ...
    </securityProviders>
    <functionSecurityStrategy type="..." />
  </rubicon.security>
  
  Userprovider "None" existiert nicht mehr, da es im Framework keinen Anwendungsfall gibt. 
    Sollte dieser Anwendungsfall in einem Projekt auftreten, kann Rubicon.Security.NullUserProvider in die Konfiguration eingetragen werden.
    
  SecurityClient.CreateSecurityClientFromConfiguration() ist liefert eine Null-Object Implementierung des SecurityClient zurück, wenn das
  NullSecurityService konfiguriert ist. Bisher: Exception.

- ObjectSecurityProvider zu ObjectSecurityAdapter umbenannt.
- Web.UI.WebSecurityProvider zu Web.UI.WebSecurityAdapter umbenannt.
- Web.ExecutionEngine.WxeSecurityProvider zu Web.ExecutionEngine.WxeSecurityAdapter umbenannt.
