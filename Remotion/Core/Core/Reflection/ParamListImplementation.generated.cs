//------------------------------------------------------------------------------
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated.
//
//------------------------------------------------------------------------------
// This file is part of the re-motion Core Framework (www.re-motion.org)
// Copyright (C) 2005-2008 rubicon informationstechnologie gmbh, www.rubicon.eu
// 
// The re-motion Core Framework is free software; you can redistribute it 
// and/or modify it under the terms of the GNU Lesser General Public License 
// version 3.0 as published by the Free Software Foundation.
// 
// This framework is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this framework; if not, see http://www.gnu.org/licenses.
// 
using System;
using Remotion.Utilities;

namespace Remotion.Reflection
{
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation : ParamList
  {
    

    public ParamListImplementation ()
    {
      
    }

    public override Type FuncType
    {
      get { return typeof (Func<object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action castAction;
      try
      {
        castAction = (Action) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction ();
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func<object> castFunc;
      try
      {
      castFunc = (Func<object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc ();
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] {  };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] {  };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2;

    public ParamListImplementation ( A1 a1, A2 a2 )
    {
      _a1 = a1; _a2 = a2;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2> castAction;
      try
      {
        castAction = (Action<A1, A2>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3> castAction;
      try
      {
        castAction = (Action<A1, A2, A3>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11; private readonly A12 _a12;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11; _a12 = a12;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11), typeof (A12) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11; private readonly A12 _a12; private readonly A13 _a13;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12, A13 a13 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11; _a12 = a12; _a13 = a13;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11), typeof (A12), typeof (A13) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11; private readonly A12 _a12; private readonly A13 _a13; private readonly A14 _a14;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12, A13 a13, A14 a14 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11; _a12 = a12; _a13 = a13; _a14 = a14;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11), typeof (A12), typeof (A13), typeof (A14) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11; private readonly A12 _a12; private readonly A13 _a13; private readonly A14 _a14; private readonly A15 _a15;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12, A13 a13, A14 a14, A15 a15 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11; _a12 = a12; _a13 = a13; _a14 = a14; _a15 = a15;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11), typeof (A12), typeof (A13), typeof (A14), typeof (A15) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11; private readonly A12 _a12; private readonly A13 _a13; private readonly A14 _a14; private readonly A15 _a15; private readonly A16 _a16;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12, A13 a13, A14 a14, A15 a15, A16 a16 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11; _a12 = a12; _a13 = a13; _a14 = a14; _a15 = a15; _a16 = a16;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11), typeof (A12), typeof (A13), typeof (A14), typeof (A15), typeof (A16) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16 };
    }
  }
  /// <summary>
  /// Implements <see cref="ParamList"/> for a specific number of arguments. Use one of the <see cref="ParamList.Create"/> overloads to create
  /// instances of the <see cref="ParamList"/> implementation classes.
  /// </summary>
  public class ParamListImplementation<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17> : ParamList
  {
    private readonly A1 _a1; private readonly A2 _a2; private readonly A3 _a3; private readonly A4 _a4; private readonly A5 _a5; private readonly A6 _a6; private readonly A7 _a7; private readonly A8 _a8; private readonly A9 _a9; private readonly A10 _a10; private readonly A11 _a11; private readonly A12 _a12; private readonly A13 _a13; private readonly A14 _a14; private readonly A15 _a15; private readonly A16 _a16; private readonly A17 _a17;

    public ParamListImplementation ( A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12, A13 a13, A14 a14, A15 a15, A16 a16, A17 a17 )
    {
      _a1 = a1; _a2 = a2; _a3 = a3; _a4 = a4; _a5 = a5; _a6 = a6; _a7 = a7; _a8 = a8; _a9 = a9; _a10 = a10; _a11 = a11; _a12 = a12; _a13 = a13; _a14 = a14; _a15 = a15; _a16 = a16; _a17 = a17;
    }

    public override Type FuncType
    {
      get { return typeof (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, object>); }
    }

    public override Type ActionType
    {
      get { return typeof (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>); }
    }

    public override void InvokeAction (Delegate action)
    {
      ArgumentUtility.CheckNotNull ("action", action);

      Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17> castAction;
      try
      {
        castAction = (Action<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>) action;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("action", ActionType, action.GetType ());
      }

      castAction (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17);
    }

    public override object InvokeFunc (Delegate func)
    {
      ArgumentUtility.CheckNotNull ("func", func);

      Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, object> castFunc;
      try
      {
      castFunc = (Func< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, object>) func;
      }
      catch (InvalidCastException)
      {
        throw new ArgumentTypeException ("func", FuncType, func.GetType ());
      }

      return castFunc (_a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17);
    }

    public override object InvokeConstructor (ConstructorLookupInfo constructorLookupInfo)
    {
      ArgumentUtility.CheckNotNull ("constructorLookupInfo", constructorLookupInfo);
      var funcDelegate = constructorLookupInfo.GetDelegate (FuncType);
      return InvokeFunc (funcDelegate);
    }

    public override Type[] GetParameterTypes ()
    {
      return new Type[] { typeof (A1), typeof (A2), typeof (A3), typeof (A4), typeof (A5), typeof (A6), typeof (A7), typeof (A8), typeof (A9), typeof (A10), typeof (A11), typeof (A12), typeof (A13), typeof (A14), typeof (A15), typeof (A16), typeof (A17) };
    }

    public override object[] GetParameterValues ()
    {
      return new object[] { _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17 };
    }
  }
}
