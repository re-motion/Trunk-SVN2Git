// This file is part of the re-motion Core Framework (www.re-motion.org)
// Copyright (C) 2005-2009 rubicon informationstechnologie gmbh, www.rubicon.eu
// 
// The re-motion Core Framework is free software; you can redistribute it 
// and/or modify it under the terms of the GNU Lesser General Public License 
// as published by the Free Software Foundation; either version 2.1 of the 
// License, or (at your option) any later version.
// 
// re-motion is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with re-motion; if not, see http://www.gnu.org/licenses.
// 
using System;
using Remotion.Mixins.Context;

namespace Remotion.Mixins.CodeGeneration
{
  /// <summary>
  /// Provides a common interface for classes used to get concrete types for the mixin configuration.
  /// </summary>
  public interface IConcreteTypeBuilder
  {
    /// <summary>
    /// Gets a concrete mixed type for the given target class configuration.
    /// </summary>
    /// <param name="classContext">The <see cref="ClassContext"/> holding the mixin configuration for the target class.</param>
    /// <returns>A concrete type with all mixins from <paramref name="classContext"/> mixed in.</returns>
    /// <remarks>This is mostly for internal reasons, users should use <see cref="TypeFactory.GetConcreteType(Type)"/> instead.</remarks>
    Type GetConcreteType (ClassContext classContext);

    /// <summary>
    /// Gets a concrete mixin type for the given mixin configuration.
    /// </summary>
    /// <param name="concreteMixinTypeIdentifier">The <see cref="ConcreteMixinTypeIdentifier"/> defining the mixin type to get.</param>
    /// <returns>A concrete mixin type for the given <paramref name="concreteMixinTypeIdentifier"/>.</returns>
    /// <remarks>This is mostly for internal reasons, users will hardly ever need to use this method.</remarks>
    ConcreteMixinType GetConcreteMixinType (ConcreteMixinTypeIdentifier concreteMixinTypeIdentifier);

    /// <summary>
    /// Saves the assemblies generated by this <see cref="IConcreteTypeBuilder"/> to disk and resets the builder, so that it can continue to generate 
    /// types. 
    /// </summary>
    /// <returns>An array containing the paths of the assembly files saved.</returns>
    /// <remarks>
    /// <para>
    /// Each time this method is called, only the types generated since the last save operation are persisted.
    /// </para>
    /// <para>
    /// Having different assemblies with the same names loaded into one AppDomain can lead to sporadic
    /// <see cref="TypeLoadException">TypeLoadExceptions</see> in reflective scenarios.
    /// </para>
    /// </remarks>
    string[] SaveAndResetDynamicScope ();
  }
}
