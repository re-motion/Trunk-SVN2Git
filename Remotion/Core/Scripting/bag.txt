public class ReadOnlyDictionary<TKey, TValue> : IEnumerable, IEnumerable<KeyValuePair<TKey, TValue>>
{
  private readonly Dictionary<TKey, TValue> _dictionary;

  IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator ()
  {
    return ((IEnumerable<KeyValuePair<TKey, TValue>>) _dictionary).GetEnumerator ();
  }

  public IEnumerator GetEnumerator ()
  {
    return ((IEnumerable) _dictionary).GetEnumerator();
  }

  public void CopyTo (Array array, int index)
  {
    ((ICollection) _dictionary).CopyTo (array, index);
  }

  //public object SyncRoot
  //{
  //  get { return _dictionary.SyncRoot; }
  //}

  //public bool IsSynchronized
  //{
  //  get { return _dictionary.IsSynchronized; }
  //}

  public bool Contains (object key)
  {
    return ((IDictionary) _dictionary).Contains (key);
  }

  //public void Add (object key, object value)
  //{
  //  ((IDictionary) _dictionary).Add (key, value);
  //}

  //public IDictionaryEnumerator IDictionary.GetEnumerator ()
  //{
  //  return ((IDictionary) _dictionary).GetEnumerator();
  //}

  //public void Remove (object key)
  //{
  //  ((IDictionary) _dictionary).Remove (key);
  //}

  //public object this [object key]
  //{
  //  get { return _dictionary[key]; }
  //  set { _dictionary[key] = value; }
  //}

  //public ICollection Keys
  //{
  //  get { return _dictionary.Keys; }
  //}

  //public ICollection Values
  //{
  //  get { return _dictionary.Values; }
  //}

  //public bool IsReadOnly
  //{
  //  get { return _dictionary.IsReadOnly; }
  //}

  //public bool IsFixedSize
  //{
  //  get { return _dictionary.IsFixedSize; }
  //}

  //public void Add (TKey key, TValue value)
  //{
  //  _dictionary.Add (key, value);
  //}

  //public void Clear ()
  //{
  //  _dictionary.Clear();
  //}

  public bool ContainsKey (TKey key)
  {
    return _dictionary.ContainsKey (key);
  }

  public bool ContainsValue (TValue value)
  {
    return _dictionary.ContainsValue (value);
  }

  //public Dictionary<TKey, TValue>.Enumerator GetEnumerator ()
  //{
  //  return _dictionary.GetEnumerator();
  //}

  public void GetObjectData (SerializationInfo info, StreamingContext context)
  {
    _dictionary.GetObjectData (info, context);
  }

  public void OnDeserialization (object sender)
  {
    _dictionary.OnDeserialization (sender);
  }

  //public bool Remove (TKey key)
  //{
  //  return _dictionary.Remove (key);
  //}

  public bool TryGetValue (TKey key, out TValue value)
  {
    return _dictionary.TryGetValue (key, out value);
  }

  public IEqualityComparer<TKey> Comparer
  {
    get { return _dictionary.Comparer; }
  }

  public int Count
  {
    get { return _dictionary.Count; }
  }

  public Dictionary<TKey, TValue>.KeyCollection Keys
  {
    get { return _dictionary.Keys; }
  }

  public Dictionary<TKey, TValue>.ValueCollection Values
  {
    get { return _dictionary.Values; }
  }

  //public TValue this [TKey key]
  //{
  //  get { return _dictionary[key]; }
  //  set { _dictionary[key] = value; }
  //}

  //public void Add (KeyValuePair item)
  //{
  //  _dictionary.Add (item);
  //}

  //public IEnumerator GetEnumerator ()
  //{
  //  return _dictionary.GetEnumerator();
  //}

  //public bool IsReadOnly
  //{
  //  get { return _dictionary.IsReadOnly; }
  //}

  //public bool Contains (KeyValuePair<TKey, TValue> item)
  //{
  //  return _dictionary.Contains (item);
  //}

  //public ICollection Keys
  //{
  //  get { return _dictionary.Keys; }
  //}

  //public ICollection Values
  //{
  //  get { return _dictionary.Values; }
  //}

  //public void CopyTo (KeyValuePair<TKey, TValue>[] array, int arrayIndex)
  //{
  //  _dictionary.CopyTo (array, arrayIndex);
  //}

  //public bool Remove (KeyValuePair item)
  //{
  //  return _dictionary.Remove (item);
  //}
}

