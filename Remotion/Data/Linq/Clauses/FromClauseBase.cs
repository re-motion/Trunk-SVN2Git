// This file is part of the re-motion Core Framework (www.re-motion.org)
// Copyright (C) 2005-2009 rubicon informationstechnologie gmbh, www.rubicon.eu
// 
// The re-motion Core Framework is free software; you can redistribute it 
// and/or modify it under the terms of the GNU Lesser General Public License 
// version 3.0 as published by the Free Software Foundation.
// 
// re-motion is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with re-motion; if not, see http://www.gnu.org/licenses.
// 
using System;
using System.Collections.Generic;
using Remotion.Collections;
using Remotion.Data.Linq.DataObjectModel;
using Remotion.Utilities;

namespace Remotion.Data.Linq.Clauses
{
  /// <summary>
  /// Base class for all kinds of from clauses in <see cref="QueryModel"/>
  /// </summary>
  public abstract class FromClauseBase : IClause
  {
    private string _itemName;
    private Type _itemType;

    /// <summary>
    /// Initializes a new instance of the <see cref="FromClauseBase"/> class.
    /// </summary>
    /// <param name="itemName">A name describing the items generated by the from clause.</param>
    /// <param name="itemType">The type of the items generated by the from clause.</param>
    protected FromClauseBase (string itemName, Type itemType)
    {
      ArgumentUtility.CheckNotNullOrEmpty ("itemName", itemName);
      ArgumentUtility.CheckNotNull ("itemType", itemType);

      _itemName = itemName;
      _itemType = itemType;
      JoinClauses = new ObservableCollection<JoinClause> ();
      JoinClauses.ItemInserted += CheckForNullValues;
      JoinClauses.ItemSet += CheckForNullValues;

    }

    /// <summary>
    /// Gets or sets a name describing the items generated by this from clause.
    /// </summary>
    public string ItemName
    {
      get { return _itemName; }
      set { _itemName = ArgumentUtility.CheckNotNullOrEmpty ("value",value); }
    }

    /// <summary>
    /// Gets or sets the type of the items generated by this from clause.
    /// </summary>
    public Type ItemType
    {
      get { return _itemType; }
      set { _itemType = ArgumentUtility.CheckNotNull ("value",value); }
    }

    public ObservableCollection<JoinClause> JoinClauses { get; private set; }

    /// <summary>
    /// Method for getting source of a from clause.
    /// </summary>
    /// <param name="databaseInfo"></param>
    /// <returns><see cref="IColumnSource"/></returns>
    public virtual IColumnSource GetColumnSource (IDatabaseInfo databaseInfo)
    {
      ArgumentUtility.CheckNotNull ("databaseInfo", databaseInfo);
      return DatabaseInfoUtility.GetTableForFromClause (databaseInfo, this);
    }

    public abstract void Accept (IQueryVisitor visitor);
    public abstract Type GetQuerySourceType ();

    protected void AddClonedJoinClauses (IEnumerable<JoinClause> originalJoinClauses, CloneContext cloneContext)
    {
      ArgumentUtility.CheckNotNull ("originalJoinClauses", originalJoinClauses);
      ArgumentUtility.CheckNotNull ("cloneContext", cloneContext);

      foreach (var joinClause in originalJoinClauses)
      {
        var joinClauseClone = joinClause.Clone (cloneContext);
        JoinClauses.Add (joinClauseClone);
      }
    }

    private void CheckForNullValues (object sender, ObservableCollectionChangedEventArgs<JoinClause> e)
    {
      ArgumentUtility.CheckNotNull ("e.Item", e.Item);
    }
  }
}
