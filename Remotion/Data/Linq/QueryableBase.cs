// This file is part of the re-motion Core Framework (www.re-motion.org)
// Copyright (C) 2005-2009 rubicon informationstechnologie gmbh, www.rubicon.eu
// 
// The re-motion Core Framework is free software; you can redistribute it 
// and/or modify it under the terms of the GNU Lesser General Public License 
// version 3.0 as published by the Free Software Foundation.
// 
// re-motion is distributed in the hope that it will be useful, 
// but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with re-motion; if not, see http://www.gnu.org/licenses.
// 
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Remotion.Utilities;

namespace Remotion.Data.Linq
{
  /// <summary>
  /// Acts as a common base class for <see cref="IQueryable{T}"/> implementations based on re-linq. In a specific LINQ provider, a custom queryable
  /// class should derive from <see cref="QueryableBase{T}"/> and supply an implementation of <see cref="IQueryExecutor"/> that is used to execute
  /// the query represented by the queryable.
  /// </summary>
  /// <typeparam name="T">The type of the result items yielded by this query.</typeparam>
  public abstract class QueryableBase<T> : IOrderedQueryable<T>
  {
    private readonly IQueryProvider _queryProvider;

    /// <summary>
    /// Initializes a new instance of the <see cref="QueryableBase&lt;T&gt;"/> class with a <see cref="DefaultQueryProvider"/> and the given 
    /// <paramref name="executor"/>. This constructor should be used by subclasses to begin a new query. The <see cref="Expression"/> generated by 
    /// this constructor is a <see cref="ConstantExpression"/> pointing back to this <see cref="QueryableBase{T}"/>.
    /// </summary>
    /// <param name="executor">The <see cref="IQueryExecutor"/> used to execute the query represented by this <see cref="QueryableBase{T}"/>.</param>
    protected QueryableBase (IQueryExecutor executor)
    {
      ArgumentUtility.CheckNotNull ("executor", executor);

      _queryProvider = new DefaultQueryProvider (GetType().GetGenericTypeDefinition(), executor);
      Expression = Expression.Constant (this);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QueryableBase&lt;T&gt;"/> class with a specific <see cref="IQueryProvider"/>. This constructor
    /// should only be used to begin a query when <see cref="DefaultQueryProvider"/> does not fit the requirements.
    /// </summary>
    /// <param name="provider">The provider used to execute the query represented by this <see cref="QueryableBase{T}"/> and to construct
    /// queries around this <see cref="QueryableBase{T}"/>.</param>
    protected QueryableBase (IQueryProvider provider)
    {
      ArgumentUtility.CheckNotNull ("provider", provider);

      _queryProvider = provider;
      Expression = Expression.Constant (this);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QueryableBase&lt;T&gt;"/> class with a given <paramref name="provider"/> and 
    /// <paramref name="expression"/>. A constructor with a matching signature must be exposed on subclasses because it is used by 
    /// <see cref="DefaultQueryProvider"/> to construct queries around this <see cref="QueryableBase{T}"/> when a query method (e.g. of the
    /// <see cref="Queryable"/> class) is called.
    /// </summary>
    /// <param name="provider">The provider used to execute the query represented by this <see cref="QueryableBase{T}"/> and to construct
    /// queries around this <see cref="QueryableBase{T}"/>.</param>
    /// <param name="expression">The expression representing the query.</param>
    protected QueryableBase (IQueryProvider provider, Expression expression)
    {
      ArgumentUtility.CheckNotNull ("provider", provider);
      ArgumentUtility.CheckNotNull ("expression", expression);

      if (!typeof (IEnumerable<T>).IsAssignableFrom (expression.Type))
        throw new ArgumentTypeException ("expression", typeof (IEnumerable<T>), expression.Type);

      _queryProvider = provider;
      Expression = expression;
    }

    public Expression Expression { get; private set; }

    public IQueryProvider Provider
    {
      get { return _queryProvider; }
    }

    public Type ElementType
    {
      get { return typeof (T); }
    }

    public IEnumerator<T> GetEnumerator()
    {
      return _queryProvider.Execute<IEnumerable<T>> (Expression).GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
      return ((IEnumerable)_queryProvider.Execute (Expression)).GetEnumerator();
    }
  }
}