<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the re-motion Core Framework (www.re-motion.org)
 ! Copyright (C) 2005-2008 rubicon informationstechnologie gmbh, www.rubicon.eu
 ! 
 ! The re-motion Core Framework is free software; you can redistribute it 
 ! and/or modify it under the terms of the GNU Lesser General Public License 
 ! version 3.0 as published by the Free Software Foundation.
 ! 
 ! re-motion is distributed in the hope that it will be useful, 
 ! but WITHOUT ANY WARRANTY; without even the implied warranty of 
 ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
 ! GNU Lesser General Public License for more details.
 ! 
 ! You should have received a copy of the GNU Lesser General Public License
 ! along with re-motion; if not, see http://www.gnu.org/licenses.
-->
<!--EXTERNAL_PROPERTIES: build.version.noconfig-->
<project xmlns="nant-schema" name="Remotion">

  <include buildfile="build/properties.include.build" verbose="true" />
  <include buildfile="build/Remotion.include.build" verbose="true" />
  <include buildfile="build/Remotion.Doc.include.build" verbose="true" />

  <property name="solution.basedir" value="${project::get-base-directory()}" />
  <property name="solution.global-dir" value="/development/global" overwrite="false"/>
  <property name="solution.build-version-file" value="${solution.basedir}/build/buildversion.xml" />
  <property name="solution.key-file" value="${solution.global-dir}/remotion.snk" overwrite="false" />
  <property name="solution.intellisense-xslt-file" value="file:///C:${solution.global-dir}/xslt/xmldoc.xslt" overwrite="false" />
  <property name="prereq.assemblies" value="${solution.basedir}/prereq/assemblies" />
  <property name="project.basedir" value="${solution.basedir}/${project.dir}" dynamic="true" />
  <property name="build.outputdir" value="${build.basedir}/${nant.settings.currentframework}/bin/${project.config}" dynamic="true" />
  <property name="build.temp.root" value="" overwrite="false" />
  <property name="build.temp.outputdir" value="${build.temp.basedir}/${nant.settings.currentframework}/${project.config}" dynamic="true" />
  <property name="build.test.outputdir" value="${build.temp.basedir}/${nant.settings.currentframework}/tests/${project.config}" dynamic="true" />
  <property name="build.update.assembly-info" value="true" overwrite="false" />
  <property name="doc.targetdir" value="${build.basedir}/${nant.settings.currentframework}/doc" dynamic="true" />
  <property name="sql.exe" value="C:\Program Files\Microsoft SQL Server\90\Tools\Binn\osql.exe" overwrite="false" />
  <property name="sql.instance" value="localhost" overwrite="false" />

  <property name="svn.exe" value="C:\Program Files\Subversion\bin\svn.exe" overwrite="false"/>
  
  <property name="doc.sdkdocversion" value="SDK_v2_0" />

  <target name="local" description="make local build into directory build/current">
    <property name="build.local" value="true" />
  </target>

  <target name="init-build-version">
    <buildversion versionfile="${solution.build-version-file}" increment="false" />
    <echo message="current version is ${build.version.noconfig}"/>

    <property name="build.basedir" value="${solution.basedir}/build/${build.version.noconfig}" unless="${property::exists('build.local')}" />
    <property name="build.basedir" value="${solution.basedir}/build/Current" if="${property::exists('build.local')}" />
    
    <property name="build.temp.basedir" value="${build.temp.root}/${build.version.noconfig}" unless="${property::exists('build.local')}" />
    <property name="build.temp.basedir" value="${build.temp.root}/Current" if="${property::exists('build.local')}" />
    <property name="build.temp.basedir" value="${build.basedir}/temp" dynamic="true" if="${string::get-length(build.temp.root) == 0}"/>
  </target>
  
  <!--======================= CONFIGURATION  =======================-->
  <!-- specify one or more of these targets before the main targets to initialize the correct configuration properties -->

  <target name="set-debug">
    <property name="build.step.get-sourcefiles" value="false" />
    <property name="build.step.compile-binaries" value="true" />
    <property name="build.step.copy-resources" value="false" />
    <property name="build.step.create-doc" value="false" />
    <property name="build.step.run-tests" value="true" />
    <property name="project.config" value="debug" />
    <property name="build.debug" value="true" />
    <property name="build.csc.define" value="DEBUG;TRACE;"/>
    <call target="init-build-version" />
  </target>

  <target name="set-release">
    <property name="build.step.get-sourcefiles" value="false" />
    <property name="build.step.compile-binaries" value="true" />
    <property name="build.step.copy-resources" value="false" />
    <property name="build.step.create-doc" value="false" />
    <property name="build.step.run-tests" value="true" />
    <property name="project.config" value="release" />
    <property name="build.debug" value="false" />
    <property name="build.csc.define" value="TRACE;"/>
    <call target="init-build-version" />
  </target>

  <target name="set-resources">
    <property name="build.step.get-sourcefiles" value="false" />
    <property name="build.step.compile-binaries" value="false" />
    <property name="build.step.copy-resources" value="true" />
    <property name="build.step.create-doc" value="false" />
    <property name="build.step.run-tests" value="false" />
    <property name="project.config" value="documentation" />
    <property name="build.debug" value="false" />
    <call target="init-build-version" />
  </target>

  <target name="set-sourcefiles">
    <property name="build.step.get-sourcefiles" value="true" />
    <property name="build.step.compile-binaries" value="false" />
    <property name="build.step.copy-resources" value="false" />
    <property name="build.step.create-doc" value="false" />
    <property name="build.step.run-tests" value="false" />
    <property name="project.config" value="documentation" />
    <property name="build.debug" value="false" />
    <call target="init-build-version" />
  </target>

  <target name="set-documentation">
    <property name="build.step.get-sourcefiles" value="false" />
    <property name="build.step.compile-binaries" value="true" />
    <property name="build.step.copy-resources" value="false" />
    <property name="build.step.create-doc" value="true" />
    <property name="build.step.run-tests" value="false" />
    <property name="project.config" value="documentation" />
    <property name="build.debug" value="false" />
    <property name="build.csc.define" value="TRACE;"/>
    <call target="init-build-version" />
  </target>

  <!--======================= PROJECT GROUPS =======================-->

  <target name="sourcefiles">
    <call target="set-sourcefiles" />
    <call target="all" />
    <call target="all-test" />
  </target>

  <target name="debug">
    <call target="set-debug" />
    <call target="all" />
    <call target="all-test" />
  </target>

  <target name="release">
    <call target="set-release" />
    <call target="all" />
    <call target="all-test" />
  </target>

  <target name="resources">
    <call target="set-resources" />
    <call target="all" />
    <call target="all-test" />
  </target>

  <target name="doc">
    <call target="doc-public" />
    <call target="doc-internal" />
  </target>

  <target name="deploy">
    <call target="cleantemp" />
    <call target="zip" cascade="false" />
    <call target="sourcezip" cascade="false" />
    <call target="securityManager-zip" cascade="false" />
    <call target="securityManager-sourcezip" cascade="false" />
    <call target="getcurrent" cascade="false" />
  </target>

  <target name="build-no-doc" >
    <!--
    <call target="clean" />
    -->
    <call target="resources" />
    <call target="debug" />
    <call target="release" />
  </target>

  <target name="all" depends="prereq,
      Data.Linq, Data.DomainObjects.Linq">
    <echo message="Target has executed."/>
  </target>

  <target name="all-test" depends="prereq, Data.Linq.UnitTests, Data.DomainObjects.Linq.UnitTests">
    <echo message="Target has executed."/>
  </target>

  <!--
  <target name="forCooNet" depends="prereq, Core, Development.Core, Development.CodeDom, Web, ObjectBinding, ObjectBinding.Web">
    <echo message="Target has executed."/>
  </target>
  -->

  <!--======================= PROJECTS =======================-->

  <target name="prereq">
    <property name="project.name" value="prereq" />
    <property name="project.dir" value="prereq" />
    <property name="project.output" value="" />
    <property name="project.extension" value="" />
    <call target="execute-buildstep" if="${build.step.get-sourcefiles}" />
  </target>

  <target name="Data.Linq">
    <property name="project.name" value="Data.Linq" />
    <property name="project.dir" value="Linq" />
    <property name="project.output" value="Remotion.Data.Linq" />
    <property name="project.extension" value="dll" />
    <call target="execute-buildstep" />
  </target>

  <target name="Data.DomainObjects.Linq">
    <property name="project.name" value="Data.DomainObjects.Linq" />
    <property name="project.dir" value="DomainObjects.Linq" />
    <property name="project.output" value="Remotion.Data.DomainObjects.Linq" />
    <property name="project.extension" value="dll" />
    <call target="execute-buildstep" />
  </target>
  <!--======================= UNIT TESTS =======================-->

  <target name="Data.Linq.UnitTests">
    <call target="Data.Linq" cascade="false"/>
    
    <property name="project.name" value="Data.Linq.UnitTests" />
    <property name="project.dir" value="Linq.UnitTests" />
    <property name="project.output" value="Remotion.Data.Linq.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
  </target>

  <target name="Data.DomainObjects.Linq.UnitTests">
    <call target="Data.Linq" cascade="false"/>
    <call target="Data.DomainObjects.Linq" cascade="false"/>

    <property name="project.name" value="Data.DomainObjects.Linq.UnitTests" />
    <property name="project.dir" value="DomainObjects.Linq.UnitTests" />
    <property name="project.output" value="Remotion.Data.DomainObjects.Linq.UnitTests" />
    <property name="project.extension" value="dll" />
    <call target="buildtest" />
  </target>

</project>
